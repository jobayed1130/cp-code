---------------------normal binary-search----------------------
     
     int l = 0,r = n-1;
     while(l<=r){
         int m = (l + r)/2;
         if(x==a[m]){
             found = 1;
             break;
         }
         else if(x<a[m]) r = m-1;
         else l = m+1;
 
     }
     if(found) cout<<"YES"<<ln;
     else cout<<"NO "<<ln;
 --------------------------upper_bound-----------------------
   l = -1,r = n;
  while(l+1<r){
      int m = (l+r)/2;
      if(x<a[m]) r = m;//upper_bound
      else l = m;
  }
  cout<<r<<ln;
  
  -----------------------lower_bound-------------------------
     int l = -1,r = n;
     while(l+1<r){
         int m = (l+r)/2;
         if(x<=a[m]) r = m;//upper_bound
         else l = m;
     }
     
   ----------------binary-search on solution(the problem can be 1 1 1 0 0 0  or 0 0 0 1 1 1 types)----------------
   if the problem 0 0 0 0 1 1 1 1 ,then the f(l)=0 and f(r)=1
   
bool ok(ll x){
f(r) is true;
}
 
 ll l = 0,r=1;

while(!ok(r))r*=2;
debug(r)
 
 while(r>l+1){
     ll m = (l+r)/2;
     if(ok(m))r=m;
     else l = m;
 
 
 }
 debug(l)
 cout<<r<<ln;
    if the problem 1 1 1 1 0 0 0 0  ,then the f(l)=1 and f(r)=0
   
bool ok(ll x){
f(l) is true;
}
 
 ll l = 0,r=1;

while(ok(r))r*=2;
debug(r)
 
 while(r>l+1){
     ll m = (l+r)/2;
     if(ok(m))l=m;
     else r = m;
 
 
 }
 debug(l)
 cout<<l<<ln;
 
 -------------fractional binary search-------------
 (for fractional binary search,we have to make a loop for 100 steps,it will be enough........)
 for(int i = 0;i<100;i++){
 }
