-----------vector------------------------

#include<bits/stdc++.h>
using namespace std;
int main ()
{
    vector<int> v;
 
    v.push_back( 1 );
    v.push_back( 2 );
    v.push_back( 3 );
 
    cout << v[0] << " " << v[1] << " " << v[2] << endl; /// 1 2 3
 
    v[1] = 3;
    cout << v[0] << " " << v[1] << " " << v[2] << endl; /// 1 3 3
 
    cout << v.size() << endl; /// 3
    for ( int i = 0; i < v.size(); i++ ) cout << v[i] << " "; /// 1 3 3
    cout << endl;
 
    vector <int> v1 = { 2, 3, 4 };
 
    cout << v1.size() << endl; /// 3
    for ( int i = 0; i < v1.size(); i++ ) cout << v1[i] << " "; /// 2 3 4
    cout << endl;
 
    v.clear();
    cout << v.size() << endl; /// 0
    cout << v.empty() << endl; /// 1
    cout << v1.empty() << endl; /// 0
 
    v1.resize(5);
    cout << v1.size() << endl; /// 5
    for ( int i = 0; i < v1.size(); i++ ) cout << v1[i] << " "; /// 2 3 4 0 0
    cout << endl;
 
    vector<int> a(5);
 
    cout << a.size() << endl; /// 5
    for ( int i = 0; i < a.size(); i++ ) cout << a[i] << " "; /// 0 0 0 0 0
    cout << endl;
 
    a = v1;
 
    for ( auto u : a ) cout << u << " "; /// 2 3 4 0 0
    cout << endl;
 
    vector<int>::iterator it;
    for ( it = a.begin(); it != a.end(); it++ ) cout << *it << " "; /// 2 3 4 0 0
    cout << endl;
 
    a = { 3, 4, 5, 1, 2 };
 
    sort ( a.begin(), a.end() ); ///O(n*log2(n))
 
    for ( auto u : a ) cout << u << " "; /// 1 2 3 4 5
    cout << endl;
 
    sort ( a.rbegin(), a.rend() );
 
    for ( auto u : a ) cout << u << " "; /// 5 4 3 2 1
    cout << endl;
 
 
    a = { 3, 4, 5, 1, 2 };
    sort ( a.begin(), a.end(), greater<int>() );
 
    for ( auto u : a ) cout << u << " "; /// 5 4 3 2 1
    cout << endl;
 
    a = { 3, 4, 5, 1, 2 };
 
    reverse( a.begin(), a.end() );
 
    for ( auto u : a ) cout << u << " "; /// 2 1 5 4 3
    cout << endl;
 
    cout << a.back() << endl; /// 3
    a.pop_back(); /// O(1) complexity.
    cout << a.back() << endl; /// 4
 
 
    a = { 3, 4, 5, 1, 2 };
    cout << *a.begin() << endl; /// 3
 
    a.erase( a.begin() ); /// O(n) complexity.
    for ( auto u : a ) cout << u << " "; /// 4 5 1 2
    cout << endl;
 
    a.erase( a.begin()+2 );
    for ( auto u : a ) cout << u << " "; /// 4 5 2
    cout << endl;
 
    a = { 1, 1, 2, 2, 2, 3, 3 };
    unique( a.begin(), a.end() );
 
    for ( auto u : a ) cout << u << " "; /// 1 2 3 2 2 3 3
    cout << endl;
 
 
    a = { 1, 1, 2, 2, 2, 3, 3 };
    int n = unique( a.begin(), a.end() ) - a.begin();
 
    cout << n << endl; /// 3
    for ( int i = 0; i < n; i++ ) cout << a[i] << " "; /// 1 2 3
    cout << endl;
 
    a = { 2, 3, 1, 5 };
    cout << max_element( a.begin(), a.end() ) - a.begin() << endl; /// 3
    cout << *max_element( a.begin(), a.end() ) << endl; /// 5
 
    return 0;
}
--------------------------------string-------------------------
///In the name of ALLAH
 
#include<bits/stdc++.h>
using namespace std;
 
int main ()
{
    /// Declare string
    string s;
 
    /// Assign string
    s = "abcdf";
 
    /// Printing size of string
    cout << s.size() << endl; /// 5
 
    /// Printing string
    cout << s << endl; /// abcdf
 
    /// Pushing char back to a string
    s += 'b';
    s += 'c';
    cout << s << endl; /// abcdfbc
 
    /// Taking input string
    cin >> s;
    cout << s << endl;
 
    s = "asdfgg";
 
    /// Checking is a string empty or not
    string s1;
    cout << s.empty() << endl; /// 0
    cout << s1.empty() << endl; /// 1
 
    /// Assigning an string in another string variable
    s1 = s;
    s.clear();
 
    cout << s.empty() << endl; /// 1
    cout << s1.empty() << endl; /// 0
 
    /// assigning 'k' in 0-th index
    s = "asdfg";
    s[0] = 'k';
    cout << s << endl;  ///kasdfg;
 
    s = "abc";
    s1 = "def";
 
    /// String concatenation
    string tmp = s + s1;
    cout << tmp << endl; /// abcdef
 
    /// String iterator
    string::iterator it;
    for ( it = s.begin(); it != s.end(); it++ ) cout << *it; /// abc
    cout << endl;
 
    /// For each loop
    for ( auto c : s ) cout << c; /// abc
    cout << endl;
 
 
    s = "asd";
    tmp = s;
 
    /// Comparing two strings
    if ( tmp == s ) cout << "Yes Match\n";
    else "No Match\n";
 
    /// String reverse and checking is a string is palindrome or not
    s = "asddsa";
    tmp = s;
    reverse( tmp.begin(), tmp.end() );
 
    if ( tmp == s ) cout << "Yes Palindrome" << endl;
    else cout << "Not Palindrome" << endl;
 
    /// String sorting in non-decreasing order
    s = "gfds";
    sort ( s.begin(), s.end() );
    cout << s << endl; /// dfgs
 
    /// String sorting in non-increasing order
    sort ( s.rbegin(), s.rend() );
    cout << s << endl; /// sgfd
 
    /// Getting all unique elements of a string. Be care full, string should be sorted.
    s = "aaadddsss";
    int n = unique( s.begin(), s.end() ) - s.begin();
    for ( int i = 0; i < n; i++ ) cout << s[i];/// ads
    cout << endl;
 
    /// Getting maximum element of string
    cout << *max_element( s.begin(), s.end() ) << endl; /// s
    /// Getting minimum element of string
    cout << *min_element( s.begin(), s.end() ) << endl; /// a
 
    /// When we want to take input with space
    /// input : Muhammad Shahriar Alam
 
    char c;
    cin >> c;
    getline( cin, s );
    s = c + s;
 
    cout << s << endl; /// Muhammad Shahriar Alam
 
    /// If we need to sort some string on lexicographical order :
 
    vector<string> v;
    v.push_back( "Muhammad" );
    v.push_back( "Nova" );
    v.push_back( "Maslenia Mubarrat" );
    v.push_back( "CPS Academy" );
    v.push_back( "Rashedul Alam Anik" );
    v.push_back( "Farhan sadik Sakib" );
    v.push_back( "Gazi Mohaimin Iqbal" );
 
    sort ( v.begin(), v.end() );
    for ( auto u : v ) cout << u << endl;
 
    /**
 
    Out put :
 
    CPS Academy
    Farhan sadik Sakib
    Gazi Mohaimin Iqbal
    Maslenia Mubarrat
    Muhammad
    Nova
    Rashedul Alam Anik
 
    */
 
    s = "asdf";
 
    s.pop_back(); /// removes last char of string
    cout << s.back() << endl; /// print last char of string
 
    v.clear();
 
    v = { "Shahriar", "Shahriar", "Momo", "Momo", "Sharif", "Sharif" };
    int Sz = unique ( v.begin(), v.end() ) - v.begin();
 
 
    cout << Sz << endl; /// Number of unique strings in vector v;
    for ( int i = 0; i < Sz; i++ ) cout << v[i] << endl; /// Prints all unique strings in vector v
 
    /// Converting int to string
    int a = 123;
    s = to_string (a);
    cout << s << endl; /// 123
    s[0] = '3';
    cout << s << endl; /// 323
 
    /// Converting string to integer
 
    s = "123";
    a = stoi ( s );
    cout << a << endl; /// 123
    a++;
    cout << a << endl; /// 124;
 
    /// Deleting a substring from string
 
    s = "ShaKAKAhriar";
 
    s.erase ( s.begin()+3, s.begin()+7 ); /// erase substring "KAKA" from string s
    cout << s << endl;
 
 
    /// Copying a substring of a string to a string
    tmp = "Gagha Alam Gadha";
    s = "Shahriar ";
 
    copy ( tmp.begin()+6, tmp.begin()+10, back_inserter ( s ) ); /// copying "Alam substring to string s back.
    cout << s << endl; /// Shahriar Alam
 
    /// Erasing all occurrence of a specific char from string.
 
    s = "aaassdddaaasdd";
    s.erase ( remove ( s.begin(), s.end(), 'a' ), s.end() ); /// removes all 'a' from s
    cout << s << endl;
 
    /// Checking is a string is substring of another string in O(n*m)
    s = "ashshasdakks";
 
    if ( s.find( "asd" ) != -1 ) cout << "Substring found";
    else cout << "Not found";
 
 
    return 0;
}
-----------------pair-----------------
///   ***   ---   |||		 In the name of ALLAH		|||   ---   ***   ///
 
 
 
#include<bits/stdc++.h>
using namespace std;
 
 
bool cmp ( const pair<int,int> &p1, const pair<int, int> &p2  )
{
	if ( p1.first > p2.first ) return 1;
	if ( p1.first == p2.first ) return ( p1.second < p2.second );
	return 0;
}
 
int main()
{
 
	/// Declear a pair o integers
 
	pair<int,int> p;
 
	p = make_pair ( 2, 3 );
	cout << p.first << " " << p.second << endl; /// 2 3
 
	p.first++;
	cout << p.first << " " << p.second << endl; /// 3 3
 
	pair<int, int> p1 = { 2, 3 };
	pair<int, int> p2 = { 1, 6 };
 
	/// Getting minimum of 2 pairs
	p = min ( p1, p2 );
	cout << p.first << " " << p.second << endl; /// 1 6
 
	/// Getting maximum of 2 pairs
	p = max ( p1, p2 );
	cout << p.first << " " << p.second << endl; /// 2 3
 
	/// Sorting pair of integers
 
	vector<pair<int,int>> v;
	v.push_back ( { 1, 5 } );
	v.push_back ( { 2, 5 } );
	v.push_back ( { 7, 1 } );
	v.push_back ( { 3, 6 } );
	v.push_back ( { 3, 6 } );
	v.push_back ( { 7, 1 } );
 
	sort ( v.begin(), v.end() );
	for ( auto u : v ) cout << u.first << " " << u.second << endl;
	cout << endl;
	/**
	1 5
	2 5
	3 6
	3 6
	7 1
	7 1
 
	*/
 
	/// Making unique pair of integers
 
	int Sz = unique ( v.begin(), v.end() ) - v.begin();
	cout << Sz << endl;
	for ( int i = 0; i < Sz; i++ ) cout << v[i].first << " " << v[i].second << endl;
	cout << endl;
 
	/**
	4
	1 5
	2 5
	3 6
	7 1
 
	*/
 
	/// sorting using comparator
	v = { {2, 3}, {4, 5}, {1, 5}, {1, 6}, {6, 7}, {6, 8} };
 
	sort ( v.begin(), v.end(), cmp );
	for ( auto u : v ) cout << u.first << " " << u.second << endl;
	cout << endl;
 
	/**
 
	6 7
	6 8
	4 5
	2 3
	1 5
	1 6
 
	*/
 
 
	v = { {2, 3}, {4, 5}, {1, 5}, {1, 6}, {6, 7}, {6, 8} };
 
	for ( int i = 0; i < v.size(); i++ ) v[i].first *= -1;
	sort ( v.begin(), v.end() );
	for ( auto u : v ) cout << (u.first*-1) << " " << u.second << endl;
	cout << endl;
 
	/**
 
	6 7
	6 8
	4 5
	2 3
	1 5
	1 6
 
	*/
 
 
	return 0;
}
 
 ------------------set-------------------------
 
 ///   ***   ---   |||        In the name of ALLAH       |||   ---   ***   ///
 
 
 
#include<bits/stdc++.h>
using namespace std;
 
 
int main()
{
    /// Declaration of set of integers
    set<int> s = { 1, 1, 2, 1, 3 };
 
    /// Printing size and elements
    cout << s.size() << endl;
    for ( auto u : s ) cout << u << " "; /// 1 2 3
    cout << endl;
 
    set<int>:: iterator it;
    for ( it = s.begin(); it != s.end(); it++ ) cout << *it << " "; /// 1 2 3
    cout << endl;
 
    /// clearing and checking is empty set
    s.clear();
    cout << s.empty() << endl; /// 1
 
    /// inserting in set
    s.insert ( 1 );
    s.insert ( 1 );
    s.insert ( 1 );
    s.insert ( 2 );
    s.insert ( 1 );
    s.insert ( 3 );
 
    cout << s.size() << endl; /// 3
    for ( auto u : s ) cout << u << " "; /// 1 2 3
    cout << endl;
 
    /// checking is specific element is in a set
    cout << s.count ( 2 ) << endl; /// 1
    cout << s.count ( 4 ) << endl; /// 0
 
 
    /// Front element in set
    cout << *s.begin() << endl; /// 1
 
    /// Last element in set
    cout << *(--s.end()) << endl; /// 3
    cout << *s.rbegin() << endl; /// 3
 
 
    /// Erase an element;
 
    s = { 1, 2, 3, 4, 5, 6 };
 
    s.erase ( 2 );
    cout << s.size() << endl; /// 5
    for ( auto u : s ) cout << u << " "; /// 1 3 4 5 6
    cout << endl;
 
    s.erase ( 10 );
    cout << s.size() << endl; /// 5
    for ( auto u : s ) cout << u << " "; /// 1 3 4 5 6
    cout << endl;
 
 
    /// Erasing front element in set
 
    s = { 1, 2, 3, 4, 5, 6 };
 
    s.erase ( s.begin() );
    cout << s.size() << endl; /// 5
    for ( auto u : s ) cout << u << " "; /// 2 3 4 5 6
    cout << endl;
 
    /// Erasing back element in set
 
    s = { 1, 2, 3, 4, 5, 6 };
 
    s.erase ( --s.end() );
    cout << s.size() << endl; /// 5
    for ( auto u : s ) cout << u << " "; /// 1 2 3 4 5
    cout << endl;
 
 
    /// set of pair
    set<pair<int, int>> s1;
 
    s1.insert ( { 1, 2 } );
    s1.insert ( { 1, 2 } );
    s1.insert ( { 4, 2 } );
    s1.insert ( { 4, 3 } );
    s1.insert ( { 2, 2 } );
    s1.insert ( { 2, 1 } );
 
    /**
 
    Output :
 
    5
    1 2
    2 1
    2 2
    4 2
    4 3
 
    */
 
    cout << s1.size() << endl;
    for ( auto u : s1 ) cout << u.first << " " << u.second << endl;
 
    /// Set of string
 
    set<string> s2;
 
    s2.insert ( "momo" );
    s2.insert ( "momo" );
    s2.insert ( "prety" );
    s2.insert ( "prety" );
    s2.insert ( "shahriar" );
    s2.insert ( "nobel" );
    s2.insert ( "sharif" );
    s2.insert ( "proma" );
 
    cout << s2.size() << endl;
    for ( auto u : s2 ) cout << u << endl;
 
    /**
 
    Output :
 
    6
    momo
    nobel
    prety
    proma
    shahriar
    sharif
 
    */
 
    /// set in discanding order
    set<int, greater<int>> s3 = {3, 4, 1, 2};
    for ( auto u : s3 ) cout << u << " "; /// 4 3 2 1
    cout << endl;
 
 
    set<string, greater<string>> s4;
 
    s4.insert ( "momo" );
    s4.insert ( "momo" );
    s4.insert ( "prety" );
    s4.insert ( "prety" );
    s4.insert ( "shahriar" );
    s4.insert ( "nobel" );
    s4.insert ( "sharif" );
    s4.insert ( "proma" );
 
    cout << s4.size() << endl;
    for ( auto u : s4 ) cout << u << endl;
 
    /**
    Output :
 
    6
    sharif
    shahriar
    proma
    prety
    nobel
    momo
 
    */
 
    set<pair<int, int>, greater<pair<int,int>>> s5;
 
    s5.insert ( { 1, 2 } );
    s5.insert ( { 1, 2 } );
    s5.insert ( { 4, 2 } );
    s5.insert ( { 4, 3 } );
    s5.insert ( { 2, 2 } );
    s5.insert ( { 2, 1 } );
 
 
    cout << s5.size() << endl;
    for ( auto u : s5 ) cout << u.first << " " << u.second << endl;
 
    /**
 
    Output :
    5
    4 3
    4 2
    2 2
    2 1
    1 2
 
    */
 
 
    return 0;
}
 


